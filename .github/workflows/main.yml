name: Build and release  # Name of the workflow

on:
  push:
    branches:
      - main # Runs only on 'main' pushes

permissions:
  contents: write

jobs:
  build-cv:  # Changed the job name to 'build-cv'
    runs-on: ubuntu-latest  # The job runs on the latest Ubuntu image
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2  # Step to checkout the repository code to the runner

      - name: Install LaTeX, Perl, and latexmk
        run: sudo apt-get install jq texlive-latex-extra texlive-fonts-recommended texlive-fonts-extra perl latexmk
        # Install required dependencies for LaTeX compilation and PDF generation

      - name: Compile LaTeX to PDF
        run: |
          cd src
          latexmk -pdf -jobname=CV -interaction=nonstopmode -f main.tex
          mv CV.pdf ../CV.pdf

      - name: Show LaTeX log
        if: failure()
        run: cat src/CV.log    
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4  # Use GitHub Action to upload the generated PDF as an artifact
        with:
          name: CV  # The name of the artifact will be 'CV'
          path: CV.pdf  # The file being uploaded as an artifact

      - name: Get Latest Release Name
        id: get_latest_release
        run: |
          latest_release=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.name')
          if [ "$latest_release" = "null" ] || [ -z "$latest_release" ]; then
            latest_release="Release v0.0.0" 
          fi
          echo "latest_release: $latest_release" 
          echo "latest_release=$latest_release" >> $GITHUB_ENV 
          latest_tag=$(echo "$latest_release" | sed 's/Release //' | sed 's/v//') 
          echo "latest_tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Determine Current Version
        id: determine_current_version
        run: |
          latest_tag="$latest_tag"
          if [ -z "$latest_tag" ]; then
            echo "latest_tag not found" 
            current_version="v1.0.0"
          else
            version=${latest_tag#v}  
            IFS='.' read -r major minor patch <<< "$version"  
            next_patch=$((patch + 1))  
            current_version="v${major}.${minor}.${next_patch}" 
          fi
          echo "current_version=$current_version" >> $GITHUB_ENV  
          echo "current_version: $current_version" 

      - name: Get Repository Information
        id: get_repository_info
        run: |
          repository_owner=$(echo "${{ github.repository }}" | cut -d '/' -f 1) 
          repository_url="https://github.com/${{ github.repository }}"  
          echo "repository_owner=$repository_owner" >> $GITHUB_ENV  
          echo "repository_url=$repository_url" >> $GITHUB_ENV 

      - name: Get Current Date
        id: get_current_date
        run: echo "current_date=$(date +%Y-%m-%d)" >> $GITHUB_ENV  # Save the current date in the format YYYY-MM-DD

      - name: Create Tag and Release
        id: create_release
        uses: softprops/action-gh-release@v1  # Action to create a GitHub release and upload assets
        if: success()  # Ensure this step only runs if all previous steps were successful
        with:
          files: |
            CV.pdf  
          tag_name: ${{ env.current_version }}  # Use the current version as the release tag
          name: Release ${{ env.current_version }}  # Name the release based on the current version
          body: |
            # Release Notes
            - Date: ${{ env.current_date }}  
            - Version: ${{ env.current_version }}  

            ## Credits
            - Repository Owner: ${{ env.repository_owner }} 
            - Repository URL: ${{ env.repository_url }} 

            ### Release generated by workflow.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use the GitHub token to authenticate API calls and actions
